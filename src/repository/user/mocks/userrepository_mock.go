// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	entities "solecode/src/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryItf is an autogenerated mock type for the UserRepositoryItf type
type UserRepositoryItf struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UserRepositoryItf) Create(_a0 *entities.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *UserRepositoryItf) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepositoryItf) GetByEmail(email string) (*entities.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepositoryItf) GetByID(id int64) (*entities.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *UserRepositoryItf) Update(_a0 *entities.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepositoryItf creates a new instance of UserRepositoryItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryItf(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryItf {
	mock := &UserRepositoryItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
