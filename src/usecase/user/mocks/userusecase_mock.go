// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	entities "solecode/src/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCaseItf is an autogenerated mock type for the UserUseCaseItf type
type UserUseCaseItf struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: name, email
func (_m *UserUseCaseItf) CreateUser(name string, email string) (*entities.User, error) {
	ret := _m.Called(name, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entities.User, error)); ok {
		return rf(name, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entities.User); ok {
		r0 = rf(name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserUseCaseItf) DeleteUser(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *UserUseCaseItf) GetUser(id int64) (*entities.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, name, email
func (_m *UserUseCaseItf) UpdateUser(id int64, name string, email string) (*entities.User, error) {
	ret := _m.Called(id, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (*entities.User, error)); ok {
		return rf(id, name, email)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) *entities.User); ok {
		r0 = rf(id, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(id, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCaseItf creates a new instance of UserUseCaseItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCaseItf(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCaseItf {
	mock := &UserUseCaseItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
